name: Build and push image

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run gofmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Build binary
        run: go build -o bin/cerbos-authz cmd/main.go

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Extract metadata for Docker tags
        id: meta
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/cerbos-ext-authz"
          if [ "${GITHUB_REF##*/}" == "main" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAG1="stable"
            TAG2="$COMMIT_HASH"
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAG1="latest"
            TAG2="$COMMIT_HASH"
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TAG1=$TAG1" >> $GITHUB_ENV
          echo "TAG2=$TAG2" >> $GITHUB_ENV

      - name: Build and Push Docker Image using Buildx
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $IMAGE_NAME:$TAG1 \
            --tag $IMAGE_NAME:$TAG2 \
            --push .

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository_owner }}/cerbos-ext-authz:${{ env.TAG1 }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'