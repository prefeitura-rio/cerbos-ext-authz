# =============================================================================
# Cerbos External Authorization Service Configuration
# =============================================================================
# Copy this file to .env and customize the values for your environment

# -----------------------------------------------------------------------------
# Core Service Configuration
# -----------------------------------------------------------------------------

# Cerbos Policy Decision Point (PDP) Configuration
CERBOS_CHECK=http://cerbos:3592/api/check/resources
CERBOS_TIMEOUT_SECONDS=2

# Mapping Service Configuration
MAPPING_SERVICE_URL=http://admin-service:8080
MAPPING_API_TOKEN=your_mapping_service_bearer_token_here
MAPPING_TIMEOUT_MS=500

# JWT Authentication Configuration
KEYCLOAK_JWKS=https://keycloak.example.com/auth/realms/your-realm/protocol/openid-connect/certs
VERIFY_JWT=true
JWT_TIMEOUT_SECONDS=1

# -----------------------------------------------------------------------------
# Caching Configuration
# -----------------------------------------------------------------------------

# Authorization result caching (Redis or in-memory)
CACHE_TTL_SECONDS=30
CACHE_FAILED_TTL_SECONDS=300
REDIS_URL=redis://redis:6379/0

# Redis mappings storage (separate Redis instance for action mappings)
# Used to store path -> action mappings shared between heimdall-admin and cerbos-ext-authz
REDIS_MAPPINGS_PASSWORD=your_redis_mappings_password_here
REDIS_MAPPINGS_SENTINEL_HOSTS=redis-sentinel-1:26379,redis-sentinel-2:26379,redis-sentinel-3:26379
REDIS_MAPPINGS_SENTINEL_SERVICE_NAME=mymaster

# -----------------------------------------------------------------------------
# Circuit Breaker Configuration
# -----------------------------------------------------------------------------

# Circuit breaker for resilience
CIRCUIT_BREAKER_ENABLED=true
CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
CIRCUIT_BREAKER_RECOVERY_TIME_SECONDS=60

# Failure mode when Cerbos is unavailable
# - fail_open: Allow requests when Cerbos is down (default)
# - fail_closed: Deny requests when Cerbos is down
FAILURE_MODE=fail_open

# -----------------------------------------------------------------------------
# Health & Monitoring
# -----------------------------------------------------------------------------

# Health check configuration
HEALTH_CHECK_INTERVAL_SECONDS=30

# OpenTelemetry configuration
OTEL_ENDPOINT=http://signoz:4317
OTEL_SERVICE_NAME=cerbos-authz

# Logging configuration
LOG_LEVEL=info

# -----------------------------------------------------------------------------
# Development & Testing
# -----------------------------------------------------------------------------

# Mock mode for development (bypasses real Cerbos and mapping service calls)
MOCK_MODE=false

# Server port override (default: 8000 for HTTP, 9000 for gRPC)
PORT=8000

# =============================================================================
# Environment-Specific Examples
# =============================================================================

# --- Development Environment ---
# CERBOS_CHECK=http://localhost:3592/api/check/resources
# MAPPING_SERVICE_URL=http://localhost:8080
# REDIS_URL=redis://localhost:6379/0
# VERIFY_JWT=false
# MOCK_MODE=true
# LOG_LEVEL=debug

# --- Staging Environment ---
# CERBOS_CHECK=https://cerbos-staging.example.com/api/check/resources
# MAPPING_SERVICE_URL=https://admin-staging.example.com
# REDIS_URL=redis://redis-staging:6379/0
# VERIFY_JWT=true
# OTEL_ENDPOINT=https://signoz-staging.example.com:4317

# --- Production Environment ---
# CERBOS_CHECK=https://cerbos.example.com/api/check/resources
# MAPPING_SERVICE_URL=https://admin.example.com
# REDIS_URL=redis://redis-prod:6379/0
# VERIFY_JWT=true
# FAILURE_MODE=fail_closed
# CIRCUIT_BREAKER_FAILURE_THRESHOLD=3
# LOG_LEVEL=warn